services:
  mysql-db:
    image: mysql:8.0
    env_file:
      - .env
    container_name: product-management-db-c1
    restart: always
    volumes:
      - mysql-data:/var/lib/mysql
    networks:
      - backend
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      timeout: 5s
      retries: 10

  mongodb:
    image: mongo:4.4
    container_name: mongodb
    restart: always
    ports:
      - 27017:27017
    volumes:
      - mongo_data:/data/db
    networks:
      - backend
    healthcheck:
      test: [ "CMD", "mongo", "--eval", "db.adminCommand('ping')" ]
      interval: 30s
      timeout: 5s
      retries: 3

  redis:
    image: redis:latest
    container_name: redis
    restart: always
    volumes:
      - redis_data:/data
    ports:
      - 6379:6379
    depends_on:
      mysql-db:
        condition: service_healthy
      mongodb:
        condition: service_healthy
    networks:
      - backend
    command: ["redis-server", "--appendonly", "yes"]
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 30s

  redis_insight:
    image: redislabs/redisinsight:1.14.0
    container_name: redis_insight
    restart: always
    ports:
      - 8001:8001
    volumes:
      - redis_insight_data:/db
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - backend
    environment:
      - REDISINSIGHT_LOG_LEVEL=debug
      - DISABLE_TELEMETRY=true
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/api/health"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 40s

  product_management1:
    build:
      context: .
      dockerfile: Dockerfile
    env_file:
      - .env
    container_name: product_management1
    restart: always
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - backend
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8080/actuator/health" ]
      interval: 25s
      timeout: 5s
      retries: 5

  product_management2:
    build:
      context: .
      dockerfile: Dockerfile
    env_file:
      - .env
    container_name: product_management2
    restart: always
    depends_on:
      redis:
        condition: service_healthy
      product_management1:
        condition: service_healthy
    networks:
      - backend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 25s
      timeout: 5s
      retries: 5

  nginx:
    image: nginx:latest
    container_name: nginx
    restart: always
    ports:
      - "80:80"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      product_management1:
        condition: service_healthy
      product_management2:
        condition: service_healthy
    networks:
      - backend

networks:
  backend:
    driver: bridge

volumes:
  mysql-data:
  mongo_data:
  redis_data:
  redis_insight_data:
